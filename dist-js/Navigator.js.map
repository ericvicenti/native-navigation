{"version":3,"sources":["../lib/js/Navigator.js"],"names":["RESULT_CANCELED","RESULT_OK","wrapResult","promise","unwrap","thunk","Screen","__esModule","default","wrapScreen","sceneName","sceneThunk","WrappedScreen","props","nativeNavigationConfig","nativeNavigationInstanceId","nativeNavigationInitialBarHeight","nativeNavigationGetConfig","emit","setTimeout","signalFirstRenderComplete","ScreenComponent","Component","displayName","propTypes","string","number","childContextTypes","func","NavigatorModule","registerScreen","screenName","options","waitForRender","mode","initialConfig","registerComponent","push","getAppKeys","indexOf","pushNative","present","presentNative","pop","payload","animated","dismiss","module","exports"],"mappings":"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","file":"Navigator.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport {\n  AppRegistry,\n} from 'react-native';\nimport AirbnbNavigator from './NavigatorModule';\nimport navigatorEmitter from './navigatorEmitter';\nimport { processConfig } from './utils';\n\nconst RESULT_CANCELED = 0;\nconst RESULT_OK = -1;\n\nfunction wrapResult(promise) {\n  // React Native doesn't allow you to pass complex data through\n  // promise rejections, so we pass it back through resolve, and\n  // do the right thing here instead.\n  return promise /* .then(data => {\n    if (data && data.code === RESULT_CANCELED) {\n      // rejection\n      throw data;\n    } else {\n      // resolved\n      return data;\n    }\n  })*/;\n}\n\nfunction unwrap(thunk) {\n  const Screen = thunk();\n  /* eslint no-underscore-dangle: 0 */\n  if (Screen.__esModule === true) {\n    return Screen.default;\n  }\n  return Screen;\n}\n\n\nfunction wrapScreen(sceneName, sceneThunk) {\n  class WrappedScreen extends React.Component {\n    constructor(props) {\n      super(props);\n      // this object will get mutated over the lifetime of this screen\n      // and collect all of the screen config\n      this.nativeNavigationConfig = {};\n    }\n    getChildContext() {\n      return {\n        nativeNavigationInstanceId: this.props.nativeNavigationInstanceId,\n        nativeNavigationInitialBarHeight: this.props.nativeNavigationInitialBarHeight,\n        nativeNavigationGetConfig: () => this.nativeNavigationConfig,\n      };\n    }\n    componentDidMount() {\n      navigatorEmitter.emit(`sceneDidMount.${this.props.nativeNavigationInstanceId}`);\n      setTimeout(\n        () => AirbnbNavigator.signalFirstRenderComplete(this.props.nativeNavigationInstanceId),\n        0\n      );\n    }\n    render() {\n      const ScreenComponent = unwrap(sceneThunk);\n      return <ScreenComponent {...this.props} />;\n    }\n  }\n\n  WrappedScreen.displayName = `Scene(${sceneName})`;\n\n  WrappedScreen.propTypes = {\n    nativeNavigationInstanceId: PropTypes.string,\n    nativeNavigationInitialBarHeight: PropTypes.number,\n  };\n\n  WrappedScreen.childContextTypes = {\n    nativeNavigationInstanceId: PropTypes.string,\n    nativeNavigationInitialBarHeight: PropTypes.number,\n    nativeNavigationGetConfig: PropTypes.func,\n  };\n\n  return WrappedScreen;\n}\n\nconst NavigatorModule = {\n  RESULT_CANCELED,\n  RESULT_OK,\n  registerScreen(screenName, sceneThunk, options = {}) {\n    const waitForRender = !!options.waitForRender;\n    const mode = options.mode || 'screen';\n    const initialConfig = options.initialConfig || null;\n\n    AirbnbNavigator.registerScreen(\n      screenName,\n      initialConfig ? processConfig(initialConfig) : null,\n      waitForRender,\n      mode\n    );\n\n    const WrappedScreen = wrapScreen(screenName, sceneThunk);\n    AppRegistry.registerComponent(screenName, () => {\n      // execute sceneThunk here immediately. This is important so we can invoke the\n      // registered \"thunk\" (which is the function this comment is contained in), and\n      // ensure that the underlying sceneThunk is also invoked, potentially requiring\n      // some JS files that haven't been required yet. This allows us to \"warm\" the\n      // module cache before a screen is rendered.\n      sceneThunk();\n      return WrappedScreen;\n    });\n    return WrappedScreen;\n  },\n\n  push(screenName, props = null, options = {}) {\n    if (typeof screenName === 'function') {\n      // TODO(lmr): handle the ability for users to pass in a component instead of a string name.\n      // we could put the identifier statically on the constructor, and look for it here and\n      // throw if it's not present...\n    }\n    if (AppRegistry.getAppKeys().indexOf(screenName) !== -1) {\n      return wrapResult(AirbnbNavigator.push(screenName, props, options));\n    }\n    return wrapResult(AirbnbNavigator.pushNative(screenName, props, options));\n  },\n  present(screenName, props = null, options = {}) {\n    if (AppRegistry.getAppKeys().indexOf(screenName) !== -1) {\n      return wrapResult(AirbnbNavigator.present(screenName, props, options));\n    }\n    return wrapResult(AirbnbNavigator.presentNative(screenName, props, options));\n  },\n  pop(payload = null, animated = true) {\n    AirbnbNavigator.pop(payload, animated);\n  },\n  dismiss(payload = null, animated = true) {\n    AirbnbNavigator.dismiss(payload, animated);\n  },\n};\n\nmodule.exports = NavigatorModule;\n"]}