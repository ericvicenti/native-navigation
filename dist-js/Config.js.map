{"version":3,"sources":["../lib/js/Config.js"],"names":["Config","props","context","deeSubscriptions","neSubscriptions","handleProps","nativeNavigationInstanceId","nativeNavigationGetConfig","nextProps","nextContext","Object","keys","forEach","removeSubscription","key","unsubscribe","event","next","prev","id","setCallback","OS","setNavigatorEmitterCallback","cb","on","addListener","screenProps","flag","hasMutated","setCallbackIfNeeded","setScreenProperties","children","Children","only","Component","propTypes","node","onAppear","func","onDisappear","onEnterTransitionComplete","contextTypes","string","module","exports"],"mappings":"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","file":"Config.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport {\n  DeviceEventEmitter,\n  Platform,\n} from 'react-native';\nimport navigatorEmitter from './navigatorEmitter';\nimport AirbnbNavigator from './NavigatorModule';\nimport {\n  processConfigWatchingForMutations,\n} from './utils';\n\nclass Config extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.deeSubscriptions = {};\n    this.neSubscriptions = {};\n    this.handleProps(\n      props,\n      {},\n      context.nativeNavigationInstanceId,\n      context.nativeNavigationGetConfig()\n    );\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.handleProps(\n      nextProps,\n      this.props,\n      nextContext.nativeNavigationInstanceId,\n      nextContext.nativeNavigationGetConfig()\n    );\n  }\n\n  componentWillUnmount() {\n    Object.keys(this.deeSubscriptions).forEach(key => {\n      DeviceEventEmitter.removeSubscription(this.deeSubscriptions[key]);\n    });\n\n    Object.keys(this.neSubscriptions).forEach(key => {\n      navigatorEmitter.unsubscribe(this.neSubscriptions[key]);\n    });\n  }\n\n  setCallbackIfNeeded(event, next, prev, id) {\n    if (next[event] !== prev[event]) {\n      this.setCallback(event, id, next[event]);\n      if (event === 'onAppear' && Platform.OS === 'android') {\n        // on android, the first `onAppear` event gets emitted before the JS has time to subscribe\n        // to it. As a result, we fire it on `sceneDidMount`, since it's effectively the same\n        // thing.\n        this.setNavigatorEmitterCallback('sceneDidMount', id, next[event]);\n      }\n    }\n  }\n\n  setNavigatorEmitterCallback(event, id, cb) {\n    const key = `${event}.${id}`;\n    if (this.neSubscriptions[key]) {\n      navigatorEmitter.unsubscribe(this.neSubscriptions[key]);\n    }\n    this.neSubscriptions[key] = navigatorEmitter.on(key, cb);\n  }\n\n  setCallback(event, id, cb) {\n    const key = `NativeNavigationScreen.${event}.${id}`;\n    if (this.deeSubscriptions[key]) {\n      DeviceEventEmitter.removeSubscription(this.deeSubscriptions[key]);\n    }\n    this.deeSubscriptions[key] = DeviceEventEmitter.addListener(key, cb);\n  }\n\n  handleProps(next, prev, id, screenProps) {\n    /* eslint-disable no-param-reassign */\n    if (!id || !screenProps) {\n      return;\n    }\n    const flag = { hasMutated: false };\n    processConfigWatchingForMutations(\n      screenProps,\n      prev,\n      next,\n      flag,\n      key => this.setCallbackIfNeeded(key, next, prev, id)\n    );\n\n    if (flag.hasMutated) {\n      // it is important that we clone `barProps` here so the instance of\n      // this `barProps` object we have is not sent across the bridge. We\n      // should not mutate objects being sent across the bridge.\n      AirbnbNavigator.setScreenProperties({ ...screenProps }, id);\n    }\n  }\n\n  render() {\n    if (this.props.children) {\n      return React.Children.only(this.props.children);\n    }\n    return null;\n  }\n}\n\nConfig.propTypes = {\n  children: PropTypes.node,\n\n  // These are the standard events, but there can be more\n  onAppear: PropTypes.func,\n  onDisappear: PropTypes.func,\n  onEnterTransitionComplete: PropTypes.func,\n};\n\nConfig.contextTypes = {\n  nativeNavigationInstanceId: PropTypes.string,\n  nativeNavigationGetConfig: PropTypes.func,\n};\n\nmodule.exports = Config;\n"]}